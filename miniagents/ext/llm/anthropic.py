"""
This module integrates Anthropic language models with MiniAgents.
"""

import logging
import typing
from functools import cache
from typing import Any, Optional

from miniagents.ext.llm.llm_common import AssistantMessage, LLMAgent
from miniagents.messages import MessageTokenAppender
from miniagents.miniagents import MiniAgent, miniagent

if typing.TYPE_CHECKING:
    import anthropic as anthropic_original

logger = logging.getLogger(__name__)


class AnthropicMessage(AssistantMessage):
    """
    A message generated by an Anthropic model.
    """


# this is for pylint to understand that `AnthropicAgent` becomes an instance of `MiniAgent` after decoration
AnthropicAgent: MiniAgent


@miniagent
class AnthropicAgent(LLMAgent):
    """
    An agent that represents Large Language Models by Anthropic. Check out the implementation of the async `__call__`
    method in the base class `LLMAgent` to understand how agents like this one work (the two most important methods
    of all class-based miniagents are `__init__` and `__call__`).
    """

    def __init__(
        self,
        fake_first_user_message: str = "/start",
        message_delimiter_for_same_role: str = "\n\n",
        async_client: Optional["anthropic_original.AsyncAnthropic"] = None,
        **other_kwargs,
    ) -> None:
        super().__init__(response_message_class=AnthropicMessage, **other_kwargs)
        self.fake_first_user_message = fake_first_user_message
        self.message_delimiter_for_same_role = message_delimiter_for_same_role
        self.async_client = async_client or _default_anthropic_client()

    async def _produce_tokens(self, message_dicts: list[dict[str, Any]], token_appender: MessageTokenAppender) -> None:
        """
        TODO Oleksandr: docstring
        """
        system_message = await self._cut_off_system_message(message_dicts)

        if self.stream:
            async with self.async_client.messages.stream(
                messages=message_dicts, system=system_message, model=self.model, **self.other_kwargs
            ) as response:
                async for token in response.text_stream:
                    token_appender.append(token)
                anthropic_final_message = await response.get_final_message()
        else:
            anthropic_final_message = await self.async_client.messages.create(
                messages=message_dicts, stream=False, system=system_message, model=self.model, **self.other_kwargs
            )
            if len(anthropic_final_message.content) != 1:
                raise RuntimeError(
                    f"exactly one TextBlock was expected from Anthropic, "
                    f"but {len(anthropic_final_message.content)} were returned instead"
                )
            # send the complete message text as a single token
            token_appender.append(anthropic_final_message.content[0].text)
        token_appender.metadata_so_far.update(anthropic_final_message.model_dump(exclude={"content"}))

    async def _prepare_message_dicts(self) -> list[dict[str, Any]]:
        """
        TODO Oleksandr: docstring
        """
        message_dicts = [self._message_to_llm_dict(msg) for msg in await self.ctx.message_promises]
        if not message_dicts:
            return []

        # let's put all the system messages at the end (they will later be combined into a single message
        # and stripped away)
        non_system_message_dicts = [message_dict for message_dict in message_dicts if message_dict["role"] != "system"]
        system_message_dicts = [message_dict for message_dict in message_dicts if message_dict["role"] == "system"]
        message_dicts = non_system_message_dicts + system_message_dicts

        fixed_message_dicts = []
        if message_dicts[0]["role"] != "user":
            # Anthropic requires the first message to come from the user (system messages don't count -
            # their content will go into a separate, `system` parameter of the API call)
            fixed_message_dicts.append({"role": "user", "content": self.fake_first_user_message})

        # if multiple messages with the same role are sent in a row, they should be concatenated
        for message_dict in message_dicts:
            if fixed_message_dicts and message_dict["role"] == fixed_message_dicts[-1]["role"]:
                fixed_message_dicts[-1]["content"] += self.message_delimiter_for_same_role + message_dict["content"]
            else:
                fixed_message_dicts.append(message_dict)

        return fixed_message_dicts

    async def _cut_off_system_message(self, message_dicts: list[dict[str, Any]]) -> str:
        """
        TODO Oleksandr: docstring
        """
        if message_dicts and message_dicts[-1]["role"] == "system":
            # let's strip away the system message at the end (look at the implementation of `_fix_message_dicts()`
            # to see why it's there)
            system_message_dict = message_dicts.pop()
            resulting_system_message = (
                system_message_dict["content"]
                if self.system is None
                else f"{self.system}{self.message_delimiter_for_same_role}{system_message_dict['content']}"
            )
        else:
            resulting_system_message = self.system

        if resulting_system_message is None:
            # pylint: disable=import-outside-toplevel
            # noinspection PyShadowingNames
            import anthropic as anthropic_original

            resulting_system_message = anthropic_original.NOT_GIVEN

        return resulting_system_message


@cache
def _default_anthropic_client() -> "anthropic_original.AsyncAnthropic":
    try:
        # pylint: disable=import-outside-toplevel
        # noinspection PyShadowingNames
        import anthropic as anthropic_original
    except ModuleNotFoundError as exc:
        raise ImportError(
            "The 'anthropic' package is required for the 'anthropic' extension of MiniAgents. "
            "Please install it via 'pip install -U anthropic'."
        ) from exc

    return anthropic_original.AsyncAnthropic()
